diff --git a/cmd/web/handlers.go b/cmd/web/handlers.go
index 2fcb0bd..d563378 100644
--- a/cmd/web/handlers.go
+++ b/cmd/web/handlers.go
@@ -31,7 +31,6 @@ func (app *application) form(w http.ResponseWriter, r *http.Request) {
 		return
 	}

-	// location := r.FormValue("location")
 	dateRange := r.FormValue("daterange")
 	duration, err := strconv.Atoi(r.FormValue("duration"))
 	if err != nil {
@@ -42,17 +41,18 @@ func (app *application) form(w http.ResponseWriter, r *http.Request) {
 	if err != nil {
 		http.Error(w, "Invalid date range", http.StatusBadRequest)
 	}
-
 	timeLabels := utils.GenerateTimeRangeLabels(timeRange)
-	// TODO hardcoded to Paris coordinates
-	forecast, err := weather.GetForecast(52.3676, 4.9041, timeRange)
+
+	city := strings.ToLower(r.FormValue("location"))
+	cityObj := app.coordinates[city]
+	forecast, err := weather.GetForecast(cityObj.Lat, cityObj.Long, timeRange)
 	if err != nil {
 		http.Error(w, "Unable to get Weather forecast", http.StatusInternalServerError)
 		return
 	}

 	scores := weather.ScoreForecast(forecast, duration)
-	best := fmt.Sprintf("Between %s and %s", timeLabels[scores.BestIndices[0]], timeLabels[scores.BestIndices[len(scores.BestIndices)-1]])
+	best := fmt.Sprintf("between %s and %s", timeLabels[scores.BestIndices[0]], timeLabels[scores.BestIndices[len(scores.BestIndices)-1]])

 	data := models.Response{
 		TimeRangeList: utils.FormatAsJSList(timeLabels, true),
@@ -67,6 +67,7 @@ func (app *application) form(w http.ResponseWriter, r *http.Request) {

 		RecommendedMoment:           best,
 		RecommendedTimeRangeIndices: utils.FormatAsJSList(scores.BestIndices, false),
+		Location:                    utils.Title(city),
 	}

 	err = app.templates.ExecuteTemplate(w, "response", data)
diff --git a/internal/models/response.go b/internal/models/response.go
index eb9468a..fa97b4d 100644
--- a/internal/models/response.go
+++ b/internal/models/response.go
@@ -1,17 +1,20 @@
 package models

+import "html/template"
+
 type Response struct {
-	TimeRangeList string
+	TimeRangeList template.JS

 	// Actual values
-	PrecipitationList string
-	TemperatureList   string
-	CloudCoverList    string
+	PrecipitationList template.JS
+	TemperatureList   template.JS
+	CloudCoverList    template.JS
 	// Scores
-	PrecipitationScoreList string
-	TemperatureScoreList   string
-	CloudCoverScoreList    string
+	PrecipitationScoreList template.JS
+	TemperatureScoreList   template.JS
+	CloudCoverScoreList    template.JS
 	// Recommended time
 	RecommendedMoment           string
-	RecommendedTimeRangeIndices string
+	RecommendedTimeRangeIndices template.JS
+	Location                    string
 }
diff --git a/internal/templates.go b/internal/templates.go
index 1ee1c78..9ef597a 100644
--- a/internal/templates.go
+++ b/internal/templates.go
@@ -3,8 +3,7 @@ package internal
 import (
 	"html/template"

-	"golang.org/x/text/cases"
-	"golang.org/x/text/language"
+	"github.com/QuintenBruynseraede/time2go/internal/utils"
 )

 func LoadTemplates() (*template.Template, error) {
@@ -18,13 +17,8 @@ func LoadTemplates() (*template.Template, error) {
 		"./ui/html/pages/index.tpl",
 	}
 	funcMap := template.FuncMap{
-		"title": title,
+		"title": utils.Title,
 	}

 	return template.New("all").Funcs(funcMap).ParseFiles(files...)
 }
-
-func title(s string) string {
-	caser := cases.Title(language.English)
-	return caser.String(s)
-}
diff --git a/internal/utils/formatting.go b/internal/utils/formatting.go
index 0aca753..3d69dc1 100644
--- a/internal/utils/formatting.go
+++ b/internal/utils/formatting.go
@@ -2,13 +2,16 @@ package utils

 import (
 	"fmt"
+	"html/template"
 	"strings"
 	"time"

 	"github.com/QuintenBruynseraede/time2go/internal/timerange"
+	"golang.org/x/text/cases"
+	"golang.org/x/text/language"
 )

-func FormatAsJSList[T any](list []T, quotes bool) string {
+func FormatAsJSList[T any](list []T, quotes bool) template.JS {
 	stringList := []string{}
 	for _, x := range list {
 		if quotes {
@@ -18,17 +21,23 @@ func FormatAsJSList[T any](list []T, quotes bool) string {
 		}
 	}

-	return "[" + strings.Join(stringList, ",") + "]"
+	return template.JS("[" + strings.Join(stringList, ",") + "]")
 }

-func GenerateTimeRangeLabels(timeRange timerange.TimeRange) []string {
+func GenerateTimeRangeLabels(timeRange timerange.TimeRange) []template.JS {
 	i := timeRange.Start
-	labels := []string{}
+	labels := []template.JS{}

 	for i.Before(timeRange.End) {
-		labels = append(labels, i.Format("Mon 15:04"))
+		labels = append(labels, template.JS(i.Format("Mon 15:04")))
 		i = i.Add(time.Hour)
 	}

 	return labels
 }
+
+// Title capitalizes the first letter of each word
+func Title(s string) string {
+	caser := cases.Title(language.English)
+	return caser.String(s)
+}
diff --git a/internal/weather/forecast.go b/internal/weather/forecast.go
index 9d36b2f..1ad82d8 100644
--- a/internal/weather/forecast.go
+++ b/internal/weather/forecast.go
@@ -11,7 +11,7 @@ import (

 func GetForecast(lat float64, long float64, timerange timerange.TimeRange) (Forecast, error) {
 	// Returns a forecast for all hours within the timerange
-	url := buildRequestUrl(long, lat)
+	url := buildRequestUrl(lat, long)
 	raw, error := utils.MakeRequest(url)

 	if error != nil {
diff --git a/ui/html/response.tpl b/ui/html/response.tpl
index f3cdebe..a879e0d 100644
--- a/ui/html/response.tpl
+++ b/ui/html/response.tpl
@@ -5,7 +5,7 @@
       <div class="">
         <dl class="flex items-center">
           <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">
-            Recommended moment to go out:
+            Recommended moment to go out near <b>{{.Location}}:</b>
           </dt>
           <dd class="text-gray-900 text-sm dark:text-white font-semibold">
            {{.RecommendedMoment}}
diff --git a/ui/html/search_results.tpl b/ui/html/search_results.tpl
index caef5af..369c609 100644
--- a/ui/html/search_results.tpl
+++ b/ui/html/search_results.tpl
@@ -14,7 +14,13 @@
 {{end}}
 {{range .}}
     <li>
-      <a href="" class="block px-4 py-2 hover:bg-gray-100">{{title .}}</a>
+      <a
+        href="#"
+        class="block px-4 py-2 hover:bg-gray-100"
+        onclick='document.getElementById("default-search").value="{{title .}}";document.getElementById("dropdown").hidden=true;'
+        >
+      {{title .}}
+      </a>
     </li>
 {{end}}
   </ul>
